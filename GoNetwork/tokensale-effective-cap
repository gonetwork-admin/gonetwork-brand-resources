Days	Effective Max CAP
1	  100,000,000.00
2	  1,960,806.56
3	  990,104.68
4	  662,254.19
5	  497,513.87
6	  398,407.29
7	  332,226.55
8	  284,900.75
9	  249,376.92
10	  161,390.55
11	  145,274.92
12	  132,085.54
13	  121,091.73
14	  111,787.39
15	  103,810.86
16	  96,896.83
17	  90,846.28
18	  85,506.95
19	  80,760.39
20	  76,513.10
21	  72,690.22
22	  69,231.18
23	  66,086.38
24	  63,214.88
25	  60,582.52
26	  58,160.63
27	  55,924.93
28	  53,854.75
29	  51,932.36

=================================
Tokens Price calculation function
=================================

price_constant1 
        uint256: 1728
price_constant2
        uint256: 1257
price_exponent1
        uint256: 2
price_exponent2
        uint256: 2
price_start
        uint256: 2000000000000000000

uint256 constant public CURVE_CUTOFF_DURATION = 8 days;
function calcTokenPrice() constant private returns (uint256) {
        uint256 elapsed;
        uint256 decay_rate1;
        uint256 decay_rate2;
      
        if (stage == Stages.AuctionStarted) {
            elapsed = now - auction_start_time;
            // The first eight days auction price curve
            if (now >= auction_start_time && now < auction_start_time + CURVE_CUTOFF_DURATION){
              decay_rate1 = elapsed ** price_exponent1 / price_constant1;
              return price_start * (1 + elapsed) / (1 + elapsed + decay_rate1);
            }
            // The remaining days auction price curve
            else if (now >= auction_start_time && now >= auction_start_time + CURVE_CUTOFF_DURATION){
              decay_rate2 = elapsed ** price_exponent2 / price_constant2;
              return price_start * (1 + elapsed) / (1 + elapsed + decay_rate2);
            }
            else {
              return price_start;
            }

        }
    }
